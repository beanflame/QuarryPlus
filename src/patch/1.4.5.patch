--- a/com/yogpc/qp/bc/RefineryRecipeHelper.java
+++ b/com/yogpc/qp/bc/RefineryRecipeHelper.java
@@ -41,9 +41,8 @@
   public static void get(final TileRefinery tr) {
     if (tr.cached != null)
       return;
-    for (final RefineryRecipe ifr : (java.util.Collection<RefineryRecipe>)RefineryRecipe.getRecipes()) {
-      if (!craft(ifr, tr, false) || !RefineryRecipeHelper.check(ifr.result, tr))
-        continue;
+    final RefineryRecipe ifr = RefineryRecipe.findRefineryRecipe(tr.src[0], tr.src[1]);
+    if (ifr != null && craft(ifr, tr, false) && RefineryRecipeHelper.check(ifr.result, tr)) {
       craft(ifr, tr, true);
       tr.rem_energy = ifr.energy;
       tr.rem_time = ifr.delay;
--- a/com/yogpc/qp/container/ContainerWorkbench.java
+++ b/com/yogpc/qp/container/ContainerWorkbench.java
@@ -44,7 +44,7 @@
       bb.writeShort((short) -1);
       return;
     }
-    bb.writeShort((short) is.shiftedIndex);
+    bb.writeShort((short) is.itemID);
     bb.writeInt(is.stackSize);
     bb.writeShort((short) is.getItemDamage());
     NBTTagCompound nbttagcompound = null;
--- a/com/yogpc/qp/item/ItemArmorElectric.java
+++ b/com/yogpc/qp/item/ItemArmorElectric.java
@@ -32,7 +32,7 @@
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
 
-public class ItemArmorElectric extends ItemArmor implements ISpecialArmor, IElectricItem, IArmorTextureProvider {
+public class ItemArmorElectric extends ItemArmor implements ISpecialArmor, IElectricItem, IArmorTextureProvider, ITickHandler {
   public ItemArmorElectric(final int id) {
     super(id, EnumHelper.addArmorMaterial("ELECTRIC", 33, new int[] {3, 8, 6, 3}, 0), QuarryPlus.proxy
         .addNewArmourRendererPrefix("electric"), 1);
@@ -42,6 +42,8 @@
     setMaxStackSize(1);
     setCreativeTab(QuarryPlusI.ct);
     this.iconIndex = 83;
+    TickRegistry.registerTickHandler(this, Side.CLIENT);
+    TickRegistry.registerTickHandler(this, Side.SERVER);
   }
 
   @Override
@@ -124,16 +126,31 @@
   }
 
   @Override
-  public void onArmorTickUpdate(final World world, final EntityPlayer player, final ItemStack is) {
+  public void tickStart(final EnumSet<TickType> type, final Object... tickData) {
+    final EntityPlayer player = (EntityPlayer) tickData[0];
+    final ItemStack is = player.inventory.armorInventory[2];
     if (Loader.isModLoaded("IC2"))
       ElectricItemManager.charge(is, ElectricItem.discharge(is, Integer.MAX_VALUE,
           Integer.MAX_VALUE, true, false), getMaxCharge());
-    if (player.inventory.armorInventory[2] != is)
+    if (this != is.getItem())
       return;
     useJetpack(player, is, toggleHover(player, is));
   }
 
   @Override
+  public void tickEnd(final EnumSet<TickType> type, final Object... tickData) {}
+
+  @Override
+  public EnumSet<TickType> ticks() {
+    return EnumSet.of(TickType.PLAYER);
+  }
+
+  @Override
+  public String getLabel() {
+    return "JetPack";
+  }
+
+  @Override
   @SideOnly(Side.CLIENT)
   public EnumRarity getRarity(final ItemStack stack) {
     return EnumRarity.uncommon;
--- a/com/yogpc/qp/render/RenderRefinery.java
+++ b/com/yogpc/qp/render/RenderRefinery.java
@@ -177,7 +177,7 @@
           GL11.glPushMatrix();
           GL11.glTranslatef(tx, ty, tz);
         }
-        bindTextureByName(Block.blocksList[liquid.shiftedIndex].getTextureFile());
+        bindTextureByName(Block.blocksList[liquid.itemID].getTextureFile());
         final ItemStack stack = liquid.asItemStack();
         setColor(stack.getItem().getColorFromItemStack(stack, 0));
         GL11.glCallList(list[(int) (liquid.amount / buf * 99)]);
@@ -196,8 +196,8 @@
       return diplayLists;
     diplayLists = new int[100];
     Block baseBlock;
-    if (fluidStack.shiftedIndex > -1) {
-      baseBlock = Block.blocksList[fluidStack.shiftedIndex];
+    if (fluidStack.itemID > -1) {
+      baseBlock = Block.blocksList[fluidStack.itemID];
     } else {
       baseBlock = Block.waterStill;
     }
--- a/com/yogpc/qp/tile/APowerTile.java
+++ b/com/yogpc/qp/tile/APowerTile.java
@@ -106,7 +106,7 @@
 
   @Override
   public final boolean demandsEnergy() {
-    return (int) (Math.min(this.maxGot - this.got, this.max - this.all - this.got) * 2.5);
+    return Math.min(this.maxGot - this.got, this.max - this.all - this.got) * 2.5 > 0;
   }
 
   @Override
@@ -115,11 +115,6 @@
   }
 
   @Override
-  public final int getMaxSafeInput() {
-    return 3;
-  }
-
-  @Override
   public final boolean isAddedToEnergyNet() {
     return true;
   }
--- a/com/yogpc/qp/tile/TileWorkbench.java
+++ b/com/yogpc/qp/tile/TileWorkbench.java
@@ -25,7 +25,7 @@
   }
 
   private static final void writeItemStackToNBT(final ItemStack is, final NBTTagCompound nbt) {
-    nbt.setShort("id", (short) is.shiftedIndex);
+    nbt.setShort("id", (short) is.itemID);
     nbt.setInteger("Count", is.stackSize);
     nbt.setShort("Damage", (short) is.getItemDamage());
 
